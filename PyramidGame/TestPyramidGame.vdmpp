class TestPyramidGame is subclass of MyTestCase
/*
  Contém os casos de teste para o jogo que cobrem todos os cenários de uso.
*/

instance variables
	public game: Pyramid := new Pyramid();

operations
	-- Testa a conversão de numero para carta e para pontos.
	public conversionTests: () ==> ()
	conversionTests() == (
		MyTestCase`assertEqual("As", Utils`convertNumberToSuit(1));
		MyTestCase`assertEqual(1, Utils`cardToPoints(1));
		MyTestCase`assertEqual("2s", Utils`convertNumberToSuit(2));
		MyTestCase`assertEqual(2, Utils`cardToPoints(2));
		MyTestCase`assertEqual("3s", Utils`convertNumberToSuit(3));
		MyTestCase`assertEqual(3, Utils`cardToPoints(3));
		MyTestCase`assertEqual("4s", Utils`convertNumberToSuit(4));
		MyTestCase`assertEqual(4, Utils`cardToPoints(4));
		MyTestCase`assertEqual("5s", Utils`convertNumberToSuit(5));
		MyTestCase`assertEqual(5, Utils`cardToPoints(5));
		MyTestCase`assertEqual("6s", Utils`convertNumberToSuit(6));
		MyTestCase`assertEqual(6, Utils`cardToPoints(6));
		MyTestCase`assertEqual("7s", Utils`convertNumberToSuit(7));
		MyTestCase`assertEqual(7, Utils`cardToPoints(7));
		MyTestCase`assertEqual("8s", Utils`convertNumberToSuit(8));
		MyTestCase`assertEqual(8, Utils`cardToPoints(8));
		MyTestCase`assertEqual("9s", Utils`convertNumberToSuit(9));
		MyTestCase`assertEqual(9, Utils`cardToPoints(9));
		MyTestCase`assertEqual("10s", Utils`convertNumberToSuit(10));
		MyTestCase`assertEqual(10, Utils`cardToPoints(10));
		MyTestCase`assertEqual("Js", Utils`convertNumberToSuit(11));
		MyTestCase`assertEqual(11, Utils`cardToPoints(11));
		MyTestCase`assertEqual("Qs", Utils`convertNumberToSuit(12));
		MyTestCase`assertEqual(12, Utils`cardToPoints(12));
		MyTestCase`assertEqual("Ks", Utils`convertNumberToSuit(13));
		MyTestCase`assertEqual(13, Utils`cardToPoints(13));
		
		MyTestCase`assertEqual("Ah", Utils`convertNumberToSuit(14));
		MyTestCase`assertEqual(1, Utils`cardToPoints(14));
		MyTestCase`assertEqual("2h", Utils`convertNumberToSuit(15));
		MyTestCase`assertEqual(2, Utils`cardToPoints(15));
		MyTestCase`assertEqual("3h", Utils`convertNumberToSuit(16));
		MyTestCase`assertEqual(3, Utils`cardToPoints(16));
		MyTestCase`assertEqual("4h", Utils`convertNumberToSuit(17));
		MyTestCase`assertEqual(4, Utils`cardToPoints(17));
		MyTestCase`assertEqual("5h", Utils`convertNumberToSuit(18));
		MyTestCase`assertEqual(5, Utils`cardToPoints(18));
		MyTestCase`assertEqual("6h", Utils`convertNumberToSuit(19));
		MyTestCase`assertEqual(6, Utils`cardToPoints(19));
		MyTestCase`assertEqual("7h", Utils`convertNumberToSuit(20));
		MyTestCase`assertEqual(7, Utils`cardToPoints(20));
		MyTestCase`assertEqual("8h", Utils`convertNumberToSuit(21));
		MyTestCase`assertEqual(8, Utils`cardToPoints(21));
		MyTestCase`assertEqual("9h", Utils`convertNumberToSuit(22));
		MyTestCase`assertEqual(9, Utils`cardToPoints(22));
		MyTestCase`assertEqual("10h", Utils`convertNumberToSuit(23));
		MyTestCase`assertEqual(10, Utils`cardToPoints(23));
		MyTestCase`assertEqual("Jh", Utils`convertNumberToSuit(24));
		MyTestCase`assertEqual(11, Utils`cardToPoints(24));
		MyTestCase`assertEqual("Qh", Utils`convertNumberToSuit(25));
		MyTestCase`assertEqual(12, Utils`cardToPoints(25));
		MyTestCase`assertEqual("Kh", Utils`convertNumberToSuit(26));
		MyTestCase`assertEqual(13, Utils`cardToPoints(26));
		
		MyTestCase`assertEqual("Ad", Utils`convertNumberToSuit(27));
		MyTestCase`assertEqual(1, Utils`cardToPoints(27));
		MyTestCase`assertEqual("2d", Utils`convertNumberToSuit(28));
		MyTestCase`assertEqual(2, Utils`cardToPoints(28));
		MyTestCase`assertEqual("3d", Utils`convertNumberToSuit(29));
		MyTestCase`assertEqual(3, Utils`cardToPoints(29));
		MyTestCase`assertEqual("4d", Utils`convertNumberToSuit(30));
		MyTestCase`assertEqual(4, Utils`cardToPoints(30));
		MyTestCase`assertEqual("5d", Utils`convertNumberToSuit(31));
		MyTestCase`assertEqual(5, Utils`cardToPoints(31));
		MyTestCase`assertEqual("6d", Utils`convertNumberToSuit(32));
		MyTestCase`assertEqual(6, Utils`cardToPoints(32));
		MyTestCase`assertEqual("7d", Utils`convertNumberToSuit(33));
		MyTestCase`assertEqual(7, Utils`cardToPoints(33));
		MyTestCase`assertEqual("8d", Utils`convertNumberToSuit(34));
		MyTestCase`assertEqual(8, Utils`cardToPoints(34));
		MyTestCase`assertEqual("9d", Utils`convertNumberToSuit(35));
		MyTestCase`assertEqual(9, Utils`cardToPoints(35));
		MyTestCase`assertEqual("10d", Utils`convertNumberToSuit(36));
		MyTestCase`assertEqual(10, Utils`cardToPoints(36));
		MyTestCase`assertEqual("Jd", Utils`convertNumberToSuit(37));
		MyTestCase`assertEqual(11, Utils`cardToPoints(37));
		MyTestCase`assertEqual("Qd", Utils`convertNumberToSuit(38));
		MyTestCase`assertEqual(12, Utils`cardToPoints(38));
		MyTestCase`assertEqual("Kd", Utils`convertNumberToSuit(39));
		MyTestCase`assertEqual(13, Utils`cardToPoints(39));
		
		MyTestCase`assertEqual("Ac", Utils`convertNumberToSuit(40));
		MyTestCase`assertEqual(1, Utils`cardToPoints(40));
		MyTestCase`assertEqual("2c", Utils`convertNumberToSuit(41));
		MyTestCase`assertEqual(2, Utils`cardToPoints(41));
		MyTestCase`assertEqual("3c", Utils`convertNumberToSuit(42));
		MyTestCase`assertEqual(3, Utils`cardToPoints(42));
		MyTestCase`assertEqual("4c", Utils`convertNumberToSuit(43));
		MyTestCase`assertEqual(4, Utils`cardToPoints(43));
		MyTestCase`assertEqual("5c", Utils`convertNumberToSuit(44));
		MyTestCase`assertEqual(5, Utils`cardToPoints(44));
		MyTestCase`assertEqual("6c", Utils`convertNumberToSuit(45));
		MyTestCase`assertEqual(6, Utils`cardToPoints(45));
		MyTestCase`assertEqual("7c", Utils`convertNumberToSuit(46));
		MyTestCase`assertEqual(7, Utils`cardToPoints(46));
		MyTestCase`assertEqual("8c", Utils`convertNumberToSuit(47));
		MyTestCase`assertEqual(8, Utils`cardToPoints(47));
		MyTestCase`assertEqual("9c", Utils`convertNumberToSuit(48));
		MyTestCase`assertEqual(9, Utils`cardToPoints(48));
		MyTestCase`assertEqual("10c", Utils`convertNumberToSuit(49));
		MyTestCase`assertEqual(10, Utils`cardToPoints(49));
		MyTestCase`assertEqual("Jc", Utils`convertNumberToSuit(50));
		MyTestCase`assertEqual(11, Utils`cardToPoints(50));
		MyTestCase`assertEqual("Qc", Utils`convertNumberToSuit(51));
		MyTestCase`assertEqual(12, Utils`cardToPoints(51));
		MyTestCase`assertEqual("Kc", Utils`convertNumberToSuit(52));
		MyTestCase`assertEqual(13, Utils`cardToPoints(52));
	);


	-- Testa o inicio do jogo
	public newPyramidScn: () ==> ()
	newPyramidScn() == (
		-- Teste sobre a pirâmide
		MyTestCase`assertEqual(7, len game.pyramidDeck);
		MyTestCase`assertEqual(1, len game.pyramidDeck(1)); 
		MyTestCase`assertEqual(2, len game.pyramidDeck(2)); 
		MyTestCase`assertEqual(3, len game.pyramidDeck(3)); 
		MyTestCase`assertEqual(4, len game.pyramidDeck(4)); 
		MyTestCase`assertEqual(5, len game.pyramidDeck(5)); 
		MyTestCase`assertEqual(6, len game.pyramidDeck(6)); 
		MyTestCase`assertEqual(7, len game.pyramidDeck(7));
		-- Cartas que sobram depois de criar a pirâmide
		MyTestCase`assertEqual(24, len game.deck);
		-- Cartas do baralho auxiliar
		MyTestCase`assertEqual(0, len game.auxDeck);
		--Cartas diponiveis para jogar
		MyTestCase`assertEqual(7, card game.validDeck);
		-- Cartas selecionadas
		MyTestCase`assertEqual(0, len game.selectedCards);
		-- Score atual
		MyTestCase`assertEqual(0, game.score);
		-- Pontos das cartas selecionadas
		MyTestCase`assertEqual(0, game.selected);
		-- Bonus de limpar a pirâmide
		MyTestCase`assertEqual(true, game.bonusPyramidDeck);
		-- Bonus de limpar o baralho
		MyTestCase`assertEqual(true, game.bonusDeck);	
	);
	
	-- Testa selecção de cartas 
	public selectCardScn: () ==> ()
	selectCardScn() == (
		-- Testa seleccionar carta
		game.selectCard(1, 7);
		MyTestCase`assertTrue(game.selected > 0);
		-- Testa desseleccionar carta
		game.selectCard(1, 7);
		MyTestCase`assertEqual(game.selected, 0);
		-- Testa seleção inválida carta
		game.selectCard(1, 1);
		MyTestCase`assertEqual(0, game.selected);
	);
	
	-- Testa pedir cartas auxiliares
	public getAuxCardScn: () ==> ()
	getAuxCardScn() == (
		-- Cenário antes de pedir a carta
		MyTestCase`assertEqual(0, len game.auxDeck);
		MyTestCase`assertEqual(24, len game.deck);
		-- Pede carta
		game.getAuxCard();
		MyTestCase`assertEqual(1, len game.auxDeck);
		MyTestCase`assertEqual(23, len game.deck);
		MyTestCase`assertEqual(8, card game.validDeck);
		game.getAuxCard();
		-- Pede outra carta
		MyTestCase`assertEqual(2, len game.auxDeck);
		MyTestCase`assertEqual(22, len game.deck);
		MyTestCase`assertEqual(9, card game.validDeck);
		game.getAuxCard();
		-- Pede outra carta, só pode fazer display das duas últimas. Só as duas última é que são válidas.
		MyTestCase`assertEqual(3, len game.auxDeck);
		MyTestCase`assertEqual(21, len game.deck);
		MyTestCase`assertEqual(9, card game.validDeck);
		-- Seleciona carta auxiliar
		game.selectCard(1, 0);
		MyTestCase`assertTrue(game.selected > 0);
		-- Desseleciona carta auxiliar
		game.selectCard(1, 0);
		MyTestCase`assertEqual(0, game.selected);
	);
	
	-- Testa o calculo do score
	public scoreScn: () ==> ()
	scoreScn() == (
		-- Cenário inicial
		game.score := 0;
		game.selected := 0;
		game.selectedCards := [];
		game.auxDeck := [];
		game.deck := [29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52];
		game.pyramidDeck := [[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28]];
		game.updateValidDeck();
		-- Testa pontuação 
		game.selectCard(5, 7);
		MyTestCase`assertEqual(10, game.score);
		MyTestCase`assertEqual(0, game.selected);
		MyTestCase`assertEqual(0, game.pyramidDeck(7)(5));
		
		-- Passa limite de 13 pontos
		game.selectCard(4, 7);
		game.selectCard(3, 7);
		MyTestCase`assertEqual(10, game.score);
		MyTestCase`assertEqual(0, game.selected);
		
		-- Score com uma carta auxiliar
		game.auxDeck := [39];
		game.updateValidDeck();
		game.selectCard(1, 0);
		MyTestCase`assertEqual(20, game.score);
		-- Score com duas cartas auxiliares
		game.auxDeck := [38, 40];
		game.updateValidDeck();
		game.selectCard(1, 0);
		game.selectCard(2, 0);
		MyTestCase`assertEqual(40, game.score);
	);	 
	
	-- Testa o calculo do score com multiplas cartas selecionadas
	public comboScn: () ==> ()
	comboScn() == (
		-- Cenário inicial
		game.score := 0;
		game.selected := 0;
		game.selectedCards := [];
		game.deck := [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52];
		game.pyramidDeck := [[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28]];
		game.auxDeck := [];
		game.updateValidDeck();
		-- Testa score com multiplas cartas
		game.selectCard(6, 7);
		MyTestCase`assertEqual(1, game.selected);
		game.selectCard(7, 7);
		MyTestCase`assertEqual(3, game.selected);
		game.selectCard(2, 7);
		MyTestCase`assertEqual(40, game.score);
		MyTestCase`assertEqual(0, game.selected);
		MyTestCase`assertEqual(0, game.pyramidDeck(7)(6));
		MyTestCase`assertEqual(0, game.pyramidDeck(7)(7));
		MyTestCase`assertEqual(0, game.pyramidDeck(7)(2));
	); 
	
	-- Testa o calculo do score com bonus de terminar o baralho
	public bonusDeckScn: () ==> ()
	bonusDeckScn() == (
		-- Cenário inicial
		game.score := 0;
		game.selected := 0;
		game.selectedCards := [];
		game.deck := [];
		game.pyramidDeck := [[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28]];
		game.updateValidDeck();
		-- Testa bónus de terminal baralho
		game.selectCard(5, 7);
		MyTestCase`assertEqual(40, game.score);
		MyTestCase`assertEqual(0, game.selected);
		MyTestCase`assertEqual(0, game.pyramidDeck(7)(5));
		MyTestCase`assertEqual(0, len game.deck);
		MyTestCase`assertEqual(false, game.bonusDeck);
	); 
	
	-- Testa o calculo do score com bonus de terminar a piramide
	public bonusPyramidDeckScn: () ==> ()
	bonusPyramidDeckScn() == (
		game.score := 0;
		game.selected := 0;
		game.selectedCards := [];
		game.deck := [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52];
		game.pyramidDeck := [[13], [0, 0], [0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];
		game.bonusDeck := true;
		game.updateValidDeck();
		-- Testa bónus de terminal pirâmide
		game.selectCard(1, 1);
		MyTestCase`assertEqual(60, game.score);
		MyTestCase`assertEqual(0, game.selected);
		MyTestCase`assertEqual(0, game.pyramidDeck(1)(1));
		MyTestCase`assertEqual(false, game.bonusPyramidDeck);
	);
	
	-- Testa cenário em que o jogador perde por falta de jogadas possíveis
	public noPossiblePlaysScn: () ==> ()
	noPossiblePlaysScn() == (
		game.deck := [1];
		game.pyramidDeck := [[11], [0, 0], [0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];
		game.bonusPyramidDeck := true;
		game.score := 0;
		game.selected := 0;
		game.selectedCards := [];
		game.auxDeck := [];
		game.updateValidDeck();
		
		-- Jogada não permitida
		game.selectCard(1, 7);
		MyTestCase`assertEqual(0, game.selected);
		
		-- Verifica condições de jogo
		game.getAuxCard();
		MyTestCase`assertEqual(false, game.continueGame());
		MyTestCase`assertEqual(false, game.isFinished());
		
	);
	
	-- Testa cenário de vitória
	public winnerScn: () ==> ()
	winnerScn() == (
		game.deck := [];
		game.auxDeck := [];
		game.pyramidDeck := [[0], [0, 0], [0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];
		game.score := 100;
		game.updateValidDeck();
		game.bonusDeck := false;
		game.bonusPyramidDeck := false;
		Utils`printStatus();
		MyTestCase`assertEqual(false, game.continueGame());
		MyTestCase`assertEqual(true, game.isFinished());
		
	);

	public main: () ==> ()
	main() == (
		conversionTests();
		newPyramidScn();
		selectCardScn();
		getAuxCardScn();
		scoreScn();
		comboScn();
		bonusDeckScn();
		bonusPyramidDeckScn();
		noPossiblePlaysScn();
		winnerScn();
	);
  
end TestPyramidGame 
